/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AgentIO_H
#define AgentIO_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "agent_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AgentIOIf {
 public:
  virtual ~AgentIOIf() {}
  virtual void SendRequest(Response& _return, const Request& req) = 0;
};

class AgentIOIfFactory {
 public:
  typedef AgentIOIf Handler;

  virtual ~AgentIOIfFactory() {}

  virtual AgentIOIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AgentIOIf* /* handler */) = 0;
};

class AgentIOIfSingletonFactory : virtual public AgentIOIfFactory {
 public:
  AgentIOIfSingletonFactory(const boost::shared_ptr<AgentIOIf>& iface) : iface_(iface) {}
  virtual ~AgentIOIfSingletonFactory() {}

  virtual AgentIOIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AgentIOIf* /* handler */) {}

 protected:
  boost::shared_ptr<AgentIOIf> iface_;
};

class AgentIONull : virtual public AgentIOIf {
 public:
  virtual ~AgentIONull() {}
  void SendRequest(Response& /* _return */, const Request& /* req */) {
    return;
  }
};

typedef struct _AgentIO_SendRequest_args__isset {
  _AgentIO_SendRequest_args__isset() : req(false) {}
  bool req :1;
} _AgentIO_SendRequest_args__isset;

class AgentIO_SendRequest_args {
 public:

  AgentIO_SendRequest_args(const AgentIO_SendRequest_args&);
  AgentIO_SendRequest_args& operator=(const AgentIO_SendRequest_args&);
  AgentIO_SendRequest_args() {
  }

  virtual ~AgentIO_SendRequest_args() throw();
  Request req;

  _AgentIO_SendRequest_args__isset __isset;

  void __set_req(const Request& val);

  bool operator == (const AgentIO_SendRequest_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const AgentIO_SendRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentIO_SendRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AgentIO_SendRequest_pargs {
 public:


  virtual ~AgentIO_SendRequest_pargs() throw();
  const Request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentIO_SendRequest_result__isset {
  _AgentIO_SendRequest_result__isset() : success(false) {}
  bool success :1;
} _AgentIO_SendRequest_result__isset;

class AgentIO_SendRequest_result {
 public:

  AgentIO_SendRequest_result(const AgentIO_SendRequest_result&);
  AgentIO_SendRequest_result& operator=(const AgentIO_SendRequest_result&);
  AgentIO_SendRequest_result() {
  }

  virtual ~AgentIO_SendRequest_result() throw();
  Response success;

  _AgentIO_SendRequest_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const AgentIO_SendRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AgentIO_SendRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgentIO_SendRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AgentIO_SendRequest_presult__isset {
  _AgentIO_SendRequest_presult__isset() : success(false) {}
  bool success :1;
} _AgentIO_SendRequest_presult__isset;

class AgentIO_SendRequest_presult {
 public:


  virtual ~AgentIO_SendRequest_presult() throw();
  Response* success;

  _AgentIO_SendRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AgentIOClient : virtual public AgentIOIf {
 public:
  AgentIOClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AgentIOClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SendRequest(Response& _return, const Request& req);
  void send_SendRequest(const Request& req);
  void recv_SendRequest(Response& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AgentIOProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AgentIOIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AgentIOProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SendRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AgentIOProcessor(boost::shared_ptr<AgentIOIf> iface) :
    iface_(iface) {
    processMap_["SendRequest"] = &AgentIOProcessor::process_SendRequest;
  }

  virtual ~AgentIOProcessor() {}
};

class AgentIOProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AgentIOProcessorFactory(const ::boost::shared_ptr< AgentIOIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AgentIOIfFactory > handlerFactory_;
};

class AgentIOMultiface : virtual public AgentIOIf {
 public:
  AgentIOMultiface(std::vector<boost::shared_ptr<AgentIOIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AgentIOMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AgentIOIf> > ifaces_;
  AgentIOMultiface() {}
  void add(boost::shared_ptr<AgentIOIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void SendRequest(Response& _return, const Request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendRequest(_return, req);
    }
    ifaces_[i]->SendRequest(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AgentIOConcurrentClient : virtual public AgentIOIf {
 public:
  AgentIOConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AgentIOConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SendRequest(Response& _return, const Request& req);
  int32_t send_SendRequest(const Request& req);
  void recv_SendRequest(Response& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
