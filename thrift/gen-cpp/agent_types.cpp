/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "agent_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Request::~Request() throw() {
}


void Request::__set_service_id(const std::string& val) {
  this->service_id = val;
}

void Request::__set_path(const std::string& val) {
  this->path = val;
}

void Request::__set_timeout_m_s(const int32_t val) {
  this->timeout_m_s = val;
}

void Request::__set_body(const bytes& val) {
  this->body = val;
}

void Request::__set_headers(const std::map<std::string, std::string> & val) {
  this->headers = val;
}

void Request::__set_params(const std::map<std::string, std::string> & val) {
  this->params = val;
}

void Request::__set_callback(const std::string& val) {
  this->callback = val;
}

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_id);
          this->__isset.service_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeout_m_s);
          this->__isset.timeout_m_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->body);
          this->__isset.body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->headers.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->headers[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.headers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->params.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _ktype8;
            ::apache::thrift::protocol::TType _vtype9;
            xfer += iprot->readMapBegin(_ktype8, _vtype9, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              std::string _key12;
              xfer += iprot->readString(_key12);
              std::string& _val13 = this->params[_key12];
              xfer += iprot->readString(_val13);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->callback);
          this->__isset.callback = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Request");

  xfer += oprot->writeFieldBegin("service_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->service_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeout_m_s", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->timeout_m_s);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->body);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("headers", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->headers.size()));
    std::map<std::string, std::string> ::const_iterator _iter14;
    for (_iter14 = this->headers.begin(); _iter14 != this->headers.end(); ++_iter14)
    {
      xfer += oprot->writeString(_iter14->first);
      xfer += oprot->writeString(_iter14->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("params", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->params.size()));
    std::map<std::string, std::string> ::const_iterator _iter15;
    for (_iter15 = this->params.begin(); _iter15 != this->params.end(); ++_iter15)
    {
      xfer += oprot->writeString(_iter15->first);
      xfer += oprot->writeString(_iter15->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callback", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->callback);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a.service_id, b.service_id);
  swap(a.path, b.path);
  swap(a.timeout_m_s, b.timeout_m_s);
  swap(a.body, b.body);
  swap(a.headers, b.headers);
  swap(a.params, b.params);
  swap(a.callback, b.callback);
  swap(a.__isset, b.__isset);
}

Request::Request(const Request& other16) {
  service_id = other16.service_id;
  path = other16.path;
  timeout_m_s = other16.timeout_m_s;
  body = other16.body;
  headers = other16.headers;
  params = other16.params;
  callback = other16.callback;
  __isset = other16.__isset;
}
Request& Request::operator=(const Request& other17) {
  service_id = other17.service_id;
  path = other17.path;
  timeout_m_s = other17.timeout_m_s;
  body = other17.body;
  headers = other17.headers;
  params = other17.params;
  callback = other17.callback;
  __isset = other17.__isset;
  return *this;
}
void Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Request(";
  out << "service_id=" << to_string(service_id);
  out << ", " << "path=" << to_string(path);
  out << ", " << "timeout_m_s=" << to_string(timeout_m_s);
  out << ", " << "body=" << to_string(body);
  out << ", " << "headers=" << to_string(headers);
  out << ", " << "params=" << to_string(params);
  out << ", " << "callback=" << to_string(callback);
  out << ")";
}


Response::~Response() throw() {
}


void Response::__set_status_code(const int32_t val) {
  this->status_code = val;
}

void Response::__set_status(const std::string& val) {
  this->status = val;
}

void Response::__set_body(const bytes& val) {
  this->body = val;
}

uint32_t Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status_code);
          this->__isset.status_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->body);
          this->__isset.body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Response");

  xfer += oprot->writeFieldBegin("status_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->status_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->body);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Response &a, Response &b) {
  using ::std::swap;
  swap(a.status_code, b.status_code);
  swap(a.status, b.status);
  swap(a.body, b.body);
  swap(a.__isset, b.__isset);
}

Response::Response(const Response& other18) {
  status_code = other18.status_code;
  status = other18.status;
  body = other18.body;
  __isset = other18.__isset;
}
Response& Response::operator=(const Response& other19) {
  status_code = other19.status_code;
  status = other19.status;
  body = other19.body;
  __isset = other19.__isset;
  return *this;
}
void Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Response(";
  out << "status_code=" << to_string(status_code);
  out << ", " << "status=" << to_string(status);
  out << ", " << "body=" << to_string(body);
  out << ")";
}


